# -*- coding: utf-8 -*-
"""[AGENTE] Agente Severino

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o00dLd3blgUkNGF5gj5KNMUInnfi-iqj
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informa√ß√£o mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Exibe a busca
#print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
#print(f"P√°ginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
#print()
#display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Solu√ß√µes --- #
##########################################
# Inserir as instru√ß√µes do Agente Buscador de Solu√ß√µes #################################################
def agente_buscador(problema, data_de_hoje):
  buscador = Agent(
      name="agente_buscador",
      model="gemini-2.0-flash",
      description="Agente que busca solu√ß√µes para problemas cotidianos",
      tools = [google_search],
      instruction = """
        Voc√™ √© um assistente de pesquisas dom√©sticas. A sua tarefa √© usar a faerramenta de busca do google (google_search)
        para recuperar os resultados mais relevantes para solucionar os problemas pesquisados pelos usu√°rios.
        Foque em, no m√°ximo, 5 fontes diferentes, com na autoridade dos dom√≠nios e na quantidade de intera√ß√µes rastreadas para a fonte.
        Se uma fonte n√£o for de um dom√≠nio com autoridade alta e n√£o tiver intera√ß√µes rastreadas, ignore-a.
        Ao final, voc√™ escolher√° a solu√ß√£o mais relevante entre elas com base nas suas pesquisas e ir√° retorn√°-la como
        op√ß√£o mais segura.
      """
  )
  entrada_do_agente_buscador = f"Problema: {problema}\nData de hoje: {data_de_hoje}"
  solucoes = call_agent(buscador, entrada_do_agente_buscador)
  return solucoes

######################################
# --- Agente 2: Severino Resolve --- #
######################################
def agente_severino(problema, solucoes_mais_provaveis):
    severino = Agent(
        name="agente_severino",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um Marido de Aluguel especializado em explicar de maneira clara e com vocabul√°rio
            acess√≠vel quais s√£o as melhores solu√ß√µes para os problemas que s√£o buscados pelos usu√°rios.
            Voc√™ √© o Agente Severino, o melhor Marido de Aluguel Digital que existe no Brasil.
            Utilize as solu√ß√µes ranqueadas pelo agende planejador e, com base nisso,
            descreva a melhor solu√ß√£o para o usu√°rio. Se o usu√°rio julgar que sua primeira resposta n√£o foi √∫til,
            forne√ßa uma segunda op√ß√£o, com base na ordem criada pelo agente planejador.
            Voc√™ n√£o deve utilizar g√≠rias. Seu tom de voz √© respeitoso, mas leve e amig√°vel.
            Depois de enviar a resposta, voc√™ deve perguntar para o usu√°rio se ele gostaria que voc√™ buscasse por
            prestadores de servi√ßo que possam ajudar a resolver o problema buscado pelo usu√°rio originalmente.
            Se o usu√°rio disser que sim, ele dever√° informar a cidade e o estado onde ele mora.
            """,
        description="Agente Marido de Aluguel que soluciona problemas cotidianos"
    )
    entrada_do_agente_severino = f"Problema: {problema}\nSolu√ß√µes mais prov√°veis: {solucoes_mais_provaveis}"
    # Executa o agente
    solucao = call_agent(severino, entrada_do_agente_severino)
    return solucao

#######################################
# --- Agente 3: Severino Pergunta --- #
#######################################
def agente_questionador(problema, cidade, estado):
    questionador = Agent(
        name="agente_questionador",
        model="gemini-2.0-flash",
        tools = [google_search],
        instruction="""
            Voc√™ √© um Marido de Aluguel que ir√° pesquisar prestadores de servi√ßo utilizando a tools (google_search) para indicar ao usu√°rio.
            Depois que ele informar a cidade o estado onde reside, voc√™ deve utilizar a tools (google_search) para buscar por profissionais
            que podem ajudar a resolver o problema que o usu√°rio pesquisou inicialmente.
            """,
        description="Agente Marido de Aluguel que busca por prestadores de servi√ßo"
    )
    entrada_do_agente_questionador = f"Problema: {problema}\nCidade: {cidade}\nEstado: {estado}"
    # Executa o agente
    pergunta = call_agent(questionador, entrada_do_agente_questionador)
    return pergunta

######################################
# --- Agente 4: Severino Indica --- #
######################################
def agente_indicador(problema, indicacoes):
    indicador = Agent(
        name="agente_indicador",
        model="gemini-2.0-flash",
        tools = [google_search],
        instruction="""
            Voc√™ √© um Marido de Aluguel que acabou de pesquisar prestadores de servi√ßo que podem solucionar o problema pesquisado pelo usu√°rio.
            Utilizando a tools (google_search), voc√™ dever√° analisar quais prestadores s√£o mais relevantes com base
            na quantidade de avalia√ß√µes e da nota. Caso os prestadores de servi√ßo encontrados n√£o possuam avalia√ß√µes, considerar os
            resultados por ordem de exibi√ß√£o na tools (google_search).
            Voc√™ dever√° informar ao usu√°rio o nome do prestador de servi√ßo / empresa, o endere√ßo e o telefone. Listas apenas 3 op√ß√µes.
            """,
        description="Agente Marido de Aluguel que indica prestadores de servi√ßo"
    )
    entrada_do_agente_indicador = f"Problema: {problema}\nIndica√ß√µes: {indicacoes}"
    # Executa o agente
    indicacao = call_agent(indicador, entrada_do_agente_indicador)
    return indicacao

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("üöÄ Iniciando o Sistema de Marido de Alugel Digital com 4 Agentes üöÄ")

# --- Obter o Problema do Usu√°rio ---
problema = input("‚ùì Por favor, digite qual problema ou dificuldade voc√™ est√° enfrentando. ")

# Inserir l√≥gica do sistema de agentes ################################################

if not problema:
  print("Voc√™ ainda n√£o me contou com o que precisa de ajuda!")
else:
  print(f"Maravilha! Deixa comigo que j√° te digo o que fazer!")

problemas_buscados = agente_buscador(problema, data_de_hoje)
#print("\n--- Resultados do Agente 1 ---\n")
#display(to_markdown(problemas_buscados))
#print("----------------------1------------------------")

melhor_solucao = agente_severino(problema, problemas_buscados)
#print("\n--- Resultados do Agente 3 ---\n")
display(to_markdown(melhor_solucao))
#print("---------------------2-------------------------")

# --- Obter Cidade/Estado do Usu√°rio ---
cidade = input("‚ùì Por favor, informe sua Cidade: ")

if not cidade:
  print("Preciso que me diga o nome da sua cidade para buscar por profissionais que te ajudem!")
else:
  print(f"Muito obrigado")

estado = input("‚ùì Agora, por favor, informe seu Estado: ")

if not estado:
  print("Preciso que me diga o nome do seu estado para buscar por profissionais que te ajudem!")
else:
  print("Perfeito, deixe-me buscar pelos profissionais.")

avaliacoes = agente_questionador(problema, cidade, estado)
#print("\n--- Resultados do Agente 2 ---\n")
#display(to_markdown(avaliacoes))
#print("----------------------------------------------")

profissionais = agente_indicador(problema, avaliacoes)
print("\n--- Seguem alguns dos profissionais melhor avaliados na sua cidade ---\n")
display(to_markdown(profissionais))
print("----------------------------------------------")

